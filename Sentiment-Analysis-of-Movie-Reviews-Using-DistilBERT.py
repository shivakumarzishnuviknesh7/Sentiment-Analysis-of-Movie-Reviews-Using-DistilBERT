# -*- coding: utf-8 -*-
"""Untitled47.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SzjETM81vwS0Q4BD00uiX2U0OjhkTris
"""

pip install transformers datasets torch

"""# Data Loading and Preprocessing"""

from datasets import load_dataset
from transformers import DistilBertTokenizer

# Load the dataset
dataset = load_dataset('imdb')

# Initialize the tokenizer
tokenizer = DistilBertTokenizer.from_pretrained('distilbert-base-uncased')

# Tokenize the data
def tokenize_function(examples):
    return tokenizer(examples['text'], padding='max_length', truncation=True)

tokenized_datasets = dataset.map(tokenize_function, batched=True)

"""# Model Loading"""

from transformers import DistilBertForSequenceClassification

model = DistilBertForSequenceClassification.from_pretrained('distilbert-base-uncased-finetuned-sst-2-english')

"""# Training and Evaluation:"""

from transformers import Trainer, TrainingArguments

training_args = TrainingArguments(
    output_dir='./results',          # output directory
    evaluation_strategy="epoch",     # evaluation strategy
    per_device_train_batch_size=8,   # batch size for training
    per_device_eval_batch_size=8,    # batch size for evaluation
    num_train_epochs=1,              # number of training epochs
    weight_decay=0.01,               # strength of weight decay
)

trainer = Trainer(
    model=model,                       # the instantiated ðŸ¤— Transformers model to be trained
    args=training_args,                # training arguments, defined above
    train_dataset=tokenized_datasets['train'],   # training dataset
    eval_dataset=tokenized_datasets['test']      # evaluation dataset
)

trainer.train()

"""# Evaluation"""

results = trainer.evaluate()
print(results)

"""# Prediction"""

def predict_sentiment(text):
    inputs = tokenizer(text, return_tensors='pt', truncation=True, padding=True)
    outputs = model(**inputs)
    predictions = torch.argmax(outputs.logits, dim=-1)
    return "Positive" if predictions.item() == 1 else "Negative"

# Test the prediction function
print(predict_sentiment("This movie was fantastic!"))
print(predict_sentiment("I did not enjoy the movie at all."))